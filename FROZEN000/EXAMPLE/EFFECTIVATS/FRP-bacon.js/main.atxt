<!DOCTYPE html>
<html>

<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
<!--
<link href="https://gitcdn.github.io/bootstrap-toggle/2.2.2/css/bootstrap-toggle.min.css" rel="stylesheet">
-->
<title>EFFECTIVATS-FRP-bacon.js</title>
##patsyntax()
##thePage_style()
<style>
button:focus{
  outline:none !important;
}
</style>
<script
src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js">
</script>
<!--
<script
src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js">
</script>
-->
<script
src="https://gitcdn.github.io/bootstrap-toggle/2.2.2/js/bootstrap-toggle.min.js">
</script>
<script
src="https://cdnjs.cloudflare.com/ajax/libs/bacon.js/0.7.53/Bacon.min.js">
</script>
<script
 src="https://ats-lang.github.io/LIBRARY/libatscc2js/libatscc2js_all.js">
</script>
<script
 src="https://ats-lang.github.io/LIBRARY/libatscc2js/libatscc2js_baconjs_all.js">
</script>
<script
 src="https://ats-lang.github.io/LIBRARY/libatscc2js/libatscc2js_print_store_cats.js">
</script>
</head>

<body>

<h1>
Effective ATS:<br>
Functional Reactive Programming via Bacon.js
</h1>

##para('\

<a href="https://baconjs.github.io/.">Bacon.js</a>
is a small JS library for supporting functional reactive programming
(FRP). There is currently a fairly limited
<a href="https://github.com/githwxi/ATS-Postiats-contrib/blob/master/contrib/libatscc/libatscc2js/SATS/Bacon.js/baconjs.sats">API</a>
in ATS for a subset of functions in Bacon.js.
In this article, I would like to present some basic examples in ATS involving FRP via Bacon.js.

')##comment("para")

<h2>A Simple Counter</h2>

##para('\

Let me first contrast FRP with the direct style of reactive
programming based on callbacks. This is particularly relevant for
someone unfamiliar with FRP.

')

##para('\

Suppose that we want to implement a counter that is associated with
three buttons of the names: up, down and reset. One implemenation
is given as follows, which makes direct use of three callback functions
(that is, one for each button):

')

<hr size="2">

<div class="row">
<div class="col-md-12">
<center>
<p id="theCount_p" class="h1">00</p>
</center>
</div>
</div><!--class-row-->

<hr size="2">

<div class="row">
<div class="col-md-4">
<center>
<button
 type="button"
 class="btn btn-default btn-lg"
 onclick="theCounter_button_up_click()"
>Up</button>
</center>
</div>
<div class="col-md-4">
<center>
<button
 type="button" class="btn btn-default btn-lg"
 onclick="theCounter_button_down_click()"
>Down</button>
</center>
</div>
<div class="col-md-4">
<center>
<button
 type="button"
 class="btn btn-default btn-lg"
 onclick="theCounter_button_reset_click()"
>Reset</button>
</center>
</div>
</div><!--class-row-->

<hr size="2">

##para('\

By clicking the Reset button, one resets the displayed count to 0.
By clicking the Up/Down button, one increases/decreases the displayed
count by 1. However, the count cannot go below 0 or above 99.

')

##para('\

Such a counter can certainly be thought of as an object with an
encapsulated state, and the callback functions are just some methods
associated with the object.  For instance, the reference
##dyncode("theCount") in the following (partial) implementation of a
counter represents the state of the counter and the two functions
are methods for updating this state:

<pre
class="patsyntax">
##dats2xhtml('\
//
local

val
theCount = ref{int}(0)

in (* in-of-local *)

implement
theCounter_button_up_click
  ((*void*)) = let
  val () =
  theCount[] :=
  min(theCount[]+1, 99) in theCount_update()
end // end of [theCounter_button_up_click]

implement
theCounter_button_down_click
  ((*void*)) = let
  val () =
  theCount[] :=
  max( 0, theCount[]-1) in theCount_update()
end // end of [theCounter_button_down_click]

end // end of [local]
//
')</pre>

Note that the function ##dyncode("theCount_update") is called
for updating the displayed text (representing the state of the counter).
The entirety of this callback-based counter implementation is available
<a href="https://github.com/githwxi/ATS-Postiats/blob/master/doc/EXAMPLE/EFFECTIVATS/FRP-bacon.js/JS/theCounter_callback.dats">on-line</a>.

')##comment("para")

<h2>A Simple Counter of FRP-style</h2>

##para('\

In functional reactive programming (FRP), a button is modeled as a
stream of events (to be generated when the button is clicked), and
there are a large variety of functions in Bacon.js for creating and
manipulating such streams of events. Note that the notion of event
stream in Bacon.js is not the same as the notion of stream in ATS for
supporting stream-based lazy-evaluation.

')##comment("para")

##para('\

Given a type ##stacode("T"), the type ##stacode("EStream(T)") is for
an event stream in which each item is a value of the type
##stacode("T").  In the following code, three buttons in the DOM are
first located and then turned into three event streams:

<pre
class="patsyntax">
##dats2xhtml('\
//
val theUp_btn = $extval(ptr, "$(\\"#theUp_btn\\")")
val theDown_btn = $extval(ptr, "$(\\"#theDown_btn\\")")
val theReset_btn = $extval(ptr, "$(\\"#theReset_btn\\")")
//
val theUp_clicks =
  $extmcall(EStream(ptr), theUp_btn, "asEventStream", "click")
val theDown_clicks =
  $extmcall(EStream(ptr), theDown_btn, "asEventStream", "click")
val theReset_clicks =
  $extmcall(EStream(ptr), theReset_btn, "asEventStream", "click")
//
')</pre>

Note that the type ##stacode("EStream(ptr)") is assigned to the generated
event streams as the items in these streams are not intended to be analyzed.
A stream ##dyncode("theComb_clicks") of the type ##stacode("EStream(act)") is
created as follows by merging three streams:

<pre
class="patsyntax">
##dats2xhtml('\
//
datatype act = Up | Down | Reset
//
val theUp_clicks = theUp_clicks.map(TYPE{act})(lam _ => Up())
val theDown_clicks = theDown_clicks.map(TYPE{act})(lam _ => Down())
val theReset_clicks = theReset_clicks.map(TYPE{act})(lam _ => Reset())
//
val theComb_clicks = merge(theUp_clicks, theDown_clicks, theReset_clicks)
//
')</pre>

where the datatype ##stacode("act") is declared for differentiating
the items in ##dyncode("theComb_clicks"). The ##dyncode("map")
function on an event stream applies its second argument, a
closure-function, to each item in its first argument, which is an
event stream. In this regard, it is similar to the ##dyncode("map")
function on a lazy-stream.

')

##para('\

A property ##dyncode("theCounts") is created by scanning the stream
##dyncode("theComb_clicks"):

<pre
class="patsyntax">
##dats2xhtml('\
//
val
theCounts =
scan{int}{act}
(
  theComb_clicks
, 0 // initial count
, lam(res, act) =>
  (
    case+ act of
    | Up() => min(res+1, 99)
    | Down() => max(0, res-1)
    | Reset() => 0 // the default
  )
) (* end of [theCounts] *)
//
')</pre>

Given a type ##stacode("T"), a property of the type
##stacode("Property(T)") in Bacon.js essentially refers to a value of
the type ##stacode("T") paired with a stream of the type
##stacode("EStream(T)"). The property ##dyncode("theCounts") is
assigned the type ##stacode("Propert(int)") and its initial value is
##dyncode("0"). Whenever an item enters the stream
##dyncode("theComb_clicks"), the third argument of ##dyncode("scan"),
which is a binary closure-function, is called on the current value
associated with the property ##dyncode("theCounts") and the item to
produce the next value associated with the property.

')

##para('\

Finally, the following call to ##dyncode("onValue") is made on
##dyncode("theCounts") with a closure-function:

<pre
class="patsyntax">
##dats2xhtml('\
//
val () =
theCounts.onValue()
(
lam(count) =>
{
  val d0 = count%10 and d1 = count/10
  val d0 = String(d0) and d1 = String(d1)
  val theCount2_p = $extfcall(ptr, "jQuery", "#theCount2_p")
  val ( (*void*) ) = $extmcall(void, theCount2_p, "text", String(d1)+String(d0))
}
) (* end of [val] *)
//
')</pre>

The closure-function is first called on the initial value associated
with the property ##dyncode("theCounts"). Whenever the next value on
the property ##dyncode("theCounts") is available, a call to this
closure-function is trigged on the value.

')

##para('\

The following demo is of a counter that is implemented in the FRP-style
outlined above:

<hr size="2">

<div class="row">
<div class="col-md-12">
<center>
<p id="theCount2_p" class="h1">00</p>
</center>
</div>
</div><!--class-row-->

<hr size="2">

<div class="row">
<div class="col-md-4">
<center>
<button
 id="theUp_btn"
 type="button" class="btn btn-primary btn-lg"
>Up</button>
</center>
</div>
<div class="col-md-4">
<center>
<button
 id="theDown_btn"
 type="button" class="btn btn-primary btn-lg"
>Down</button>
</center>
</div>
<div class="col-md-4">
<center>
<button
 id="theReset_btn"
 type="button" class="btn btn-primary btn-lg"
>Reset</button>
</center>
</div>
</div><!--class-row-->

<hr size="2">

For the entirety of this implementation, please see the source code
<a href="https://github.com/githwxi/ATS-Postiats/blob/master/doc/EXAMPLE/EFFECTIVATS/FRP-bacon.js/JS/theCounter2_baconjs.dats">on-line</a>.

')##comment("para")

<h2>A Simple Auto-Counter of FRP-style</h2>

##para('\

The following demo shows an auto-counter that can change its count
automatically:

<hr size="2">

<div class="row">
<div class="col-md-12">
<center>
<p id="theCount3_p" class="h1">00</p>
</center>
</div>
</div><!--class-row-->

<hr size="2">

<div class="row">
<div class="col-md-3">
<center>
<!--
<label>
<input type="checkbox">Auto</input>
</label>
<input checked data-toggle="toggle" data-onstyle="primary" type="checkbox">
-->
<button
 id="theAuto3_btn"
 type="button" class="btn btn-default btn-lg"
>Auto</button>
</center>
</div>
<div class="col-md-3">
<center>
<button
 id="theUp3_btn"
 type="button" class="btn btn-primary btn-lg"
>Up</button>
</center>
</div>
<div class="col-md-3">
<center>
<button
 id="theDown3_btn"
 type="button" class="btn btn-primary btn-lg"
>Down</button>
</center>
</div>
<div class="col-md-3">
<center>
<button
 id="theReset3_btn"
 type="button" class="btn btn-primary btn-lg"
>Reset</button>
</center>
</div>
</div><!--class-row-->

<hr size="2">

If the Auto button is set, then pressing the Up/Down button results in
the displayed count being increased/decreased by 1 every second until
another button is pressed.  If the Auto button is not set, then pressing
the Up/Down button results in the displayed count being
increased/decreased by 1 only once.\

')

##para('\

The following code constructs a stream ##dyncode("theAuto_clicks") of
the type ##stacode("EStream(act)") and a property
##dyncode("theAuto_toggles") of the type ##stacode("Property(bool)"):

<pre
class="patsyntax">
##dats2xhtml('\
//
datatype act = Up | Down | Reset | Skip
//
val theAuto_btn = $extval(ptr, "$(\\"#theAuto3_btn\\")")
val theAuto_clicks =
    $extmcall(EStream(ptr), theAuto_btn, "asEventStream", "click")
val theAuto_clicks = theAuto_clicks.map(TYPE{act})(lam _ => Skip())
val theAuto_toggles = scan{bool}{act}(theAuto_clicks, false, lam(res, _) => ~res)
//
')</pre>

Note that ##dyncode("Skip") is added to the datatype ##stacode("act"),
which indicates no change to the count maintained by the auto-counter.
The property ##dyncode("theAuto_toggles") is a boolean one indicating
whether the Auto button is set.

')

##para('\

The function ##dyncode("Property_sampledBy_estream_cfun")
in the following code constructs a stream by essentially interpreting
each item in the stream ##dyncode("theComb_clicks") based on the
current value of ##dyncode("theAuto_toggles"):

<pre
class="patsyntax">
##dats2xhtml('\
//
val theAutoComb_stream =
  Property_sampledBy_estream_cfun
    (theAuto_toggles, theComb_clicks, lam(x, y) => if x then Skip else y)
//
')</pre>

An item entering
##dyncode("theComb_clicks") is interpreted as Skip
in ##dyncode("theAutoComb_stream") if
the Auto button is set. Otherwise, it is interpreted as what it is.

')

##para('\

In the following code, the call to the function
##dyncode("Bacon_interval") generates a stream of zeros such that a
zero enters the stream every 1000 milliseconds (that is, 1 second),
and the function ##dyncode("Property_sampledBy_estream") takes a
property and a stream and returns another stream consisting of all the
values in the given property sampled at each point when an item enters
the given stream:

<pre
class="patsyntax">
##dats2xhtml('\
//
val theTick_stream =
  Property_sampledBy_estream
    (theAuto_toggles, Bacon_interval{int}(1000(*ms*), 0))
//
')</pre>

Therefore, ##dyncode("theTick_stream") is a stream of booleans
obtained by sampling ##dyncode("theAuto_toggles") at the interval of
every 1000 milliseconds.

')

##para('\

The following code constructs a stream
##dyncode("theComb2Tick_stream") by interpreting each tick
entering
##dyncode("theTick_stream") based on the current value of the
property ##dyncode("theComb2_property"):

<pre
class="patsyntax">
##dats2xhtml('\
//
val theComb2_clicks = merge(theComb_clicks, theAuto_clicks)
val theComb2_property = EStream_toProperty_init(theComb2_clicks, Skip)
//
val theComb2Tick_stream =
  Property_sampledBy_estream_cfun
    (theComb2_property, theTick_stream, lam(x, y) => if y then x else Skip)
//
')</pre>

The tick is interpreted as Up, Down, or Reset if the last pressed button
is Up, Down, or Reset, respectively. Otherwise, the tick is interpreted as
Skip.

')

##para('\

Finally, a property ##dyncode("theCounts") can be constructed as
follows by scanning the stream obtained from merging
##dyncode("theAutoComb_stream") and ##dyncode("theComb2Tick_stream"):

<pre
class="patsyntax">
##dats2xhtml('\
//
val
theCounts =
scan{int}{act}
(
  merge
  (
    theAutoComb_stream
  , theComb2Tick_stream
  )
, 0 (*initial*)
, lam(res, act) =>
  (
    case+ act of
    | Up() => min(res+1, 99)
    | Down() => max(0, res-1)
    | Reset() => (0) | Skip() => res 
  )
) (* end of [theCounts] *)
//
')</pre>

The code for displaying the values in the property
##dyncode("theCounts") is omitted.  For the entirety of this
implementation of an auto-counter, please see the source code
<a href="https://github.com/githwxi/ATS-Postiats/blob/master/doc/EXAMPLE/EFFECTIVATS/FRP-bacon.js/JS/theCounter3_baconjs.dats">on-line</a>.
')

<h2>Compiling and Testing</h2>

##para("""\

Please find in the following files the entirety of the code presented
in this article:

<pre>
JS/theCounter_callback.dats // counter of callback-style
JS/theCounter2_baconjs.dats // counter of FRP-style via Bacon.js
JS/theCounter3_baconjs.dats // auto-counter of FRP-style via Bacon.js
</pre>

In addition, there is an accompanying ##filename("Makefile") for compiling
and testing the code.\

""")

<hr size="2">
<p>
This article is written by <a href="http://www.cs.bu.edu/~hwxi/">Hongwei Xi</a>.
</p>
##thePage_script()

<script
 src="./JS/theCounter_callback_dats.js">
</script>
<script
 src="./JS/theCounter2_baconjs_dats.js">
</script>
<script
 src="./JS/theCounter3_baconjs_dats.js">
</script>

</body>
</html>
